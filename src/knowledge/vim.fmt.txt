#PRESERVE-CENTER
#SH-SCRIPT
figlet Vi Improved
#END SH-SCRIPT
#END PRESERVE-CENTER
#CENTER
<i> Just a collection of cool stuff I find related to the vim text editor :) </i>
#END CENTER

### Plugins
- <a href="https://github.com/dense-analysis/ale">Asynchronous Linting Engine</a> (ALE) üç∫
	A great plugin that takes care of Linting, Formatting & Autocompletion
	Quite customizable but some bits are a bit dated

- <a href="https://github.com/ap/vim-css-color">CSS Color</a>
	Highlight hex codes & web names for colors with the actual color :), works really well
	Lacks support for some languages (lua) but that can be easily fixed via autocommand.

- <a href="https://github.com/sheerun/vim-polyglot">Polygot</a>
	Language pack for vim
	A good one to have since you do not notice it much unless you're very worried about startup times

- <a href="https://github.com/mattn/emmet-vim">Emmet</a>
	Why would you not have this? Especially if you edit html

- <a href="https://github.com/bhurlow/vim-parinfer">Parinfer</a> <a href="https://github.com/eraserhd/parinfer-rust"> (rs) </a>
	Infer your parenthesis!
	True bliss if you ever edit lisp code üò≥

- <a href="https://github.com/lambdalisue/fern.vim">Fern</a> üçÄ
	Great alternative to NERDTree (Project Drawer) and imo a much better one
	Feels pretty clean and nice to use

- <a href="https://github.com/itchyny/lightline.vim">Lightline</a>
	I don't use a status line but if I did I would use lightline, it works really well and is easy to customize

### Configuration 
Making the most out of vanilla vim features

#### NetRW 
Using NetRW as a file tree.
From <a href="https://shapeshed.com/vim-netrw/">this post</a>
tldr:
```vim
let g:netrw_banner = 0 " Hide the banner
let g:netrw_browse_split = 3 " Open in new tab
let g:netrw_winsize = 25 " Size
let g:netrw_liststyle = 3 " Show files in tree form
```
See what each option does with `:help netrw-browser-settings`

#### :Grep
Improving the :grep command to work similar to how [ack.vim](https://github.com/mileszs/ack.vim) works
See the <a href="https://gist.github.com/romainl/56f0c28ef953ffc157f36cc495947ab3">full gist</a> it explains everything
final snippet:
```vim
function! Grep(...)
    return system(join([&grepprg] + [expandcmd(join(a:000, ' '))], ' '))
endfunction
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr Grep(<f-args>)
augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost cgetexpr cwindow
    autocmd QuickFixCmdPost lgetexpr lwindow
augroup END
```

#### Tab Indicator 
If and only if you indent with tabs, vim can bestow upon you a slick tabline:
`set list lcs=tab:\‚îÇ\`

#### Export to HTML 
This is a pretty neat capability I did not know vim had,
By the power of an included plugin, You can run `:TOhtml` to convert the entire current file to a HTML that will be opened in a new buffer
And you can script it! Like so:
```sh
lang="$2"
f=$(mktemp)
echo "$0" | head -n -1 | nvim -n --headless \
	+"let g:html_no_progress = 0"\
	+"let g:html_ignore_folding = 0"\
	+'let g:html_prevent_copy = "fn"'\
	+"set ft=$1"\
	+"runtime! syntax/2html.vim"\
	+"wq! $f"\
	+"q!" - 1> /dev/null
```
You can see more options for it here: https://vimhelp.org/syntax.txt.html#%3ATOhtml ,
[Here](/assets/make.html) is a example file from the make script of this website.
* <strike>~~This is now used to generate code syntax highlighting for this site.</strike> - Turns out it was way too slow

#### Improving :help and :Man 
I find vim's help pages annoying to navigate since by default, its difficult to navigate between sections, this fixes it:
`au FileType help,man nnoremap <buffer> <CR> <C-]>`
This makes it so hitting enter in a help buffer will try to just to the currently selected word 
(the world the cursor is on.)
Here are some more nice shortcuts: https://vim.fandom.com/wiki/Learn_to_use_help#Simplify_help_navigation

##### Using vim as a man pager 
There are lots of ways to do it (documented [here](https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix) but 
the simplest way I found is to simple alias `man`, like so in your shell configuration file:
```sh
man () {
	nvim +"Man $2 $1" +"only"
}
```
If you use vim, remember to add this to your vimrc:
`runtime ftplugin/man.vim`
as `:help ft-man-plugin` instructs you to.

* This has some issues like files like `./local.man` but I dont often use this so its not a problem for me.

#### Linting 
Here are a few useful gists on the topic:
https://gist.github.com/romainl/2f748f0c0079769e9532924b117f9252<br> 
https://gist.github.com/romainl/ce55ce6fdc1659c5fbc0f4224fd6ad29
 
What I did to get `shellcheck` to work:
- Setup an autocommand to set the `compiler` to `shellcheck -f gcc` for any shell files
- Used https://github.com/mh21/errormarker.vim to get ALE like markings
- From error marker's readme: `let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat`
- Made vim run `:make` on file write.

Actually I have reconsidered this, its way too painful for anything complicated or over multiple lines, its a lot
simpler to just use ALE.

#CENTER
<i>~ More to come.. Maybe üöß ~</i>
#END CENTER

#PRESERVE-CENTER
#SH-SCRIPT
figlet Vi Improved
#END SH-SCRIPT
#END PRESERVE-CENTER
#CENTER
<i> Just a collection of cool stuff I find relatived to the vim text editor :) </i>
#END CENTER

--- Plugins ---
- <a href="https://github.com/dense-analysis/ale">Asynchronous Linting Engine</a> (ALE) üç∫
	A great plugin that takes care of Linting, Formatting & Autocompletion
	Quite customizable but some bits are a bit dated

- <a href="https://github.com/ap/vim-css-color">CSS Color</a>
	Highlight hex codes & web names for colors with the actual color :), works really well
	Lacks support for some languages (lua) but that can be easily fixed via autocommand.

- <a href="https://github.com/sheerun/vim-polyglot">Polygot</a>
	Language pack for vim
	A good one to have since you dont notice it much unless you're very worried about startup times

- <a href="https://github.com/mattn/emmet-vim">Emmet</a>
	Why would you not have this? especially if you edit html

- <a href="https://github.com/bhurlow/vim-parinfer">Parinfer</a> <a href="https://github.com/eraserhd/parinfer-rust"> (rs) </a>
	Infer your parens!
	True bliss if you ever edit lisp code üò≥

- <a href="https://github.com/lambdalisue/fern.vim">Fern</a> üçÄ
	Great alternative to NERDTree (Project Drawer) and imo a much better one
	Feels pretty clean and nice to use

- <a href="https://github.com/itchyny/lightline.vim">Lightline</a>
	I don't use a status line but if I did I would use lightline, it works really well and is easy to customize

--- Configuration ---
Making the most out of vanilla vim features

---- NetRW ----
From <a href="https://shapeshed.com/vim-netrw/">this post</a>
tldr:
#CODE
let g:netrw_banner = 0 " Hide the banner
let g:netrw_browse_split = 3 " Open in new tab
let g:netrw_winsize = 25 " Size
let g:netrw_liststyle = 3 " Show files in tree form
#END CODE
See what each option does with `:help netrw-browser-settings`

---- Improving vim's :grep command ----
See the <a href="https://gist.github.com/romainl/56f0c28ef953ffc157f36cc495947ab3">full gist</a> it explains everything
final snippet:
#CODE
function! Grep(...)
    return system(join([&grepprg] + [expandcmd(join(a:000, ' '))], ' '))
endfunction
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr Grep(<f-args>)
augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost cgetexpr cwindow
    autocmd QuickFixCmdPost lgetexpr lwindow
augroup END
#END CODE

---- Tab Indicator ----
If and only if you indent with tabs, vim can bestow upon you a slick tabline:
> set list lcs=tab:\‚îÇ\

---- Improving :help and :Man ----
I find vim's help pages annoying to navigate since by default, its difficult to navigate between sections, this fixes it:
> au FileType help,man nnoremap <buffer> <CR> <C-]>
This makes it so hitting enter in a help buffer will try to just to the currently selected word 
(the world the cursor is on.)

----- Using vim as a man pager -----
There are lots of ways to do it (documented [here](https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix) but 
the simplest way I found is to simple alias `man`, like so:
#CODE
man () {
	nvim +"Man $2 $1" +"only"
}
#END CODE
If you use vim, remember to add this to your vimrc:
> runtime ftplugin/man.vim
as `:help ft-man-plugin` instructs you to.

#CENTER
<i>~ More to come.. maybe üöß ~</i>
#END CENTER

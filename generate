#!/usr/bin/env bash
#shellcheck disable=2059

# Toad:
# This is meant to be my super minimal SSG and meant to only fulfill my needs and do nothing more

# Configuration
port=5000

# Extract relevant parts of the template
buffer=
pre=
post=
while read -r line; do
	case "$line" in
		"!CONTENT!")
			pre=$buffer
			buffer=
			continue
			;;
	esac
	buffer+="$line"$'\n'
done < ./template.html
post=$buffer

server="deno run --unstable -A ./.tooling/server/server.ts --port=$port --live=false "

get-modified-time () {
	stat -c '%y' $1 | cut -d' ' -f1
}

emacs_config=$XDG_CONFIG_HOME/emacs/init.el
build-file () {
	out=${1/src/out}
	mkdir -p "$(dirname $out)"
	
	case "${out#*.}" in
		"html")
			cp -f "$1" "$out"
			printf "Building \033[34m%s\033[0m	\033[32m->\033[0m	\033[34m%s\033[0m\n" "$1" "$out"
			;;
		"org")
			out=${out/.${out#*.}/.html}
			emacs  "$1" --batch -l "${emacs_config}" -f org-html-export-to-html 
			mv "${1/.org/.html}" "$out"
			;;
		"md")
			out=${out/.${out#*.}/.html}

			printf "Building \033[34m%s\033[0m	\033[32m->\033[0m	\033[34m%s\033[0m\n" "$1" "$out"
			# printf 'Not building %s\n' "$1"

			x=${out%%.html}
			x=${x##out/}
			header=${pre/\!TITLE\!/$x}
			t=$(get-modified-time $1)
			header=${header/\!TIME\!/$t}
			printf '%s' "$header" > "$out"
			bash ./.tooling/pond.sh "$1" 1>>$out #2>/dev/null # Debug fixes it somehow.. ;-;
			printf '%s' "$post" >> "$out"
			;;
	esac

}

# Generate Article Index: {{{
gen-index () {
	cp ./src/index.html ./out/index.html
	find out/ -maxdepth 1 -type d -not -path 'out/'  | while read -r folder; do
		local posts=""
		while read -r match; do
			file=${match%:*}
			title=${match#*:}
			title=${title#*'<h1'*'>'}
			title=${title%'</h1>'*}
			posts+="<li><a href='/$file'>$title</a></li>\n"
		done < <(grep -ProH '<h1.*?>.*</h1>' ${folder} )
		folder=${folder#*/}
		sed -i "s\`!POSTS-${folder^^}!\`$posts\`g" "./out/index.html"
	done
	printf "Generated Article Index\n"
	pkill --signal USR1 ${server%% *}
}
# }}}

post-build () {
	gen-index
}

# Optimize Images: {{{
optimize-image () {
	file=${1%%:*}
	image=${1#*:}
	image_path=$image
	[[ $image == *.webp ]] && return
	echo "Converting $image to WEBP"
	if [[ $image == https://* ]]; then
		echo "Downloading"
		image_path=/assets/images/dump/$(cat /proc/sys/kernel/random/uuid).webp
		curl -L -o .$image_path --progress-bar $image
	fi
	echo "Saved output to $image_path"

	out_image_path=${image_path/.png/.webp}
	out_image_path=${out_image_path/.jpg/.webp}
	cwebp .$image_path -o .$out_image_path -q 90
	initial_size=$(du .$image_path)
	final_size=$(du .$out_image_path)
	if (( ${final_size%%	*} > ${initial_size%%	*} )); then
		echo 'WEBP Conversion war larger than original image!!!'
		rm .$out_image_path
		out_image_path=$image_path
		return
	fi
	echo ">>>> s!$image_path!$out_image_path!g $file"
	sed -i "s!$image!$out_image_path!g" $file

	printf '\n\n'
}
# }}}

case $1 in

	# Serve files with hot reloading
	live)
		$server &

		paths=$( find './src/' -name '*.md' -or -name '*.org' -or -name '*.html' )
		paths+='\n'
		paths+=$( find './.tooling' -name '*.sh' )
		paths+='\n./generate'
		paths+='\n./index.html'
		paths+='\n./template.html'
		echo -e "$paths" | entr "./generate"
		;;
	
	serve)
		$server
		;;

	*)
		start_t=$(date +%s.%N)
		mkdir -p src out
		while read -r file; do
			build-file "$file" &
		done < <(find src -name "*.md" -or -name "*.html" -or -name '*.org')

		for job in $(jobs -p); do
			wait "$job"
		done

		post-build

		end_t=$(date +%s.%N)
		printf -- "--- Finished in \e[31m"
		awk "BEGIN{ printf $end_t - $start_t }"
		printf -- "s\e[0m ---\n"
	;;
esac

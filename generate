#!/usr/bin/env bash

# Init:

# Enable bash options
shopt -s globstar
shopt -s nullglob

# SSG Options
template_pre_content=
template_post_content=
output_dir="out"

# Helpers:

fin () {
	[ -n "${report_individual_builds:-}" ] && printf '\e[32m\e[1mBuilt\e[0m %s\n' "$1"
}

clean_markup () {
	local -n ptr=${1}
	ptr=${ptr//'<span class="reset">'/}
	ptr=${ptr//'</span>'/}
	ptr=${ptr#*'<h1'*'>'}
	ptr=${ptr%'</h1>'*}
	ptr=${ptr//'}'/}
	ptr=${ptr//'{'/}
	ptr=${ptr//'<img'*'>'/}
}

slugify () {
    echo "$1" | iconv -c -t ascii//TRANSLIT | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr A-Z a-z
}


base_url="https://nes.is-a.dev/${output_dir}/"
format_doc_heading () {
	doc_path=${1#'./src/'}
	doc_path=${doc_path%'.'*}

	[[ "$markup" =~ \<h1\>(.*)\<\/h1\> ]] # uses variable from parent here
	doc_title=${BASH_REMATCH[1]}
	clean_markup doc_title

	doc_url=$1
	doc_url=${doc_url/"./${output_dir}/"/"$base_url"}

	doc_heading=${template_pre_content/'!DOCUMENT-PATH!'/"$doc_path"}
	doc_heading=${doc_heading//'!TITLE!'/"$doc_title"}
	doc_heading=${doc_heading//'!URL!'/"${doc_url}"}

	toc="<ul>"
	while read -r heading; do
		local level=${heading%% *}
		local without_heading=${heading#$level }
		local slug=$(slugify "${without_heading}")
		case "$heading" in
			'## '*)
				toc+="<li><a href='#${slug}'>${without_heading}</a></li>"
				;;
			'### '*)
				toc+="<li class='toc-subheading'><a href='#${slug}'>${without_heading}</a></li>"
				;;
		esac
	done < <( grep -P "##+" $2 )
	toc+='</ul>'
	doc_heading=${doc_heading/'!TABLEOFCONTENT!'/"$toc"}
}

# Tasks:
build_md () {
	out=${1/src/"$output_dir"}
	out=${out/.md/.html}
	markup=$(quiet=true bash ./.tooling/pond.sh "$1")
	format_doc_heading "$out" "$1"
	mkdir -p "$(dirname "$out")"
	printf '%s\n%s\n%s' "$doc_heading" "$markup" "$template_post_content" > "$out"
	fin "$1"
}

build_html () {
	out=${1/src/"$output_dir"}
	cp "$1" "$out"
	fin "$1"
}


#=======================
# Generic Build Function 
#=======================

build () {
	file=$1
	case "${file##*.}" in
		'org')
			build_org "$file" 
			;;
		'html')
			build_html "$file" &
			;;
		'md')
			build_md "$file" &
			;;
		*)
			return
			;;
	esac
}

generate_org_full () {
	emacs "${emacs_arguments[@]}" >/dev/null 2>&1
}

count=0
generate_index () {
	cp ./src/index.html ./$output_dir/index.html 2> /dev/null
	find $output_dir/ \
		-maxdepth 1 \
		-type d \
		-not -path "$output_dir/"\
		-printf '%T@ %p\n' | sort -n | cut -d' ' -f2  | while read -r folder; do
			local posts=""
			while read -r match; do
				# printf "FOUND: %s\n" $match
				file=${match%%:*}
				title=${match#*:}

				clean_markup title

				[ -z "${title/ /}" ] && continue
				posts+="<li><a class='special' href='/$file'>$title</a></li>\n"
				((count++))
			done < <(grep -ProH '<h1.*?>.*</h1>' "${folder}" )
			folder=${folder#*/}
			sed -i "s\`!POSTS-${folder^^}!\`$posts\`g" "./$output_dir/index.html"
		done

		printf "\r\e[33m\e[1mBUILT\e[0m %d files.\n" "$count"
		cp ./$output_dir/index.html ./index.html 
	}

	liveStartMessage="\n\033[43m\033[30m LIVE BUILD \e[0m"

# Default: Build All Files

intermediate=
IFS="
"
while read -r line; do
	if [[ "$line" == *"!CONTENT!" ]]; then
		template_pre_content=$intermediate
		intermediate=
		continue
	fi
	intermediate+=$line$IFS
done < ./template.html
template_post_content=$intermediate

case "$1" in
	"dbg")
		quiet=true pond_debug=true bash ./.tooling/pond.sh "$2" 1> /dev/null
		exit
		;;
	"rm")
		rm -r ./$output_dir/${2}.html
		rm -r ./$output_dir/${2}.md
		generate_index
		exit
		;;
	"serve")
		python3 -m http.server 5050
		exit
		;;
	"live")
		echo -e "$liveStartMessage"
		python3 ./.tooling/hs.py &
		serverPid=$!
		sleep 1
		count=0
		IFS=$'\n'
		skip_next=
		python3 ./.tooling/fsw.py | while read -r modified_file; do
			modified_file=${modified_file//$'\r'/}
			if [ -n "$skip_next" ]; then
				skip_next=
				continue
			fi
			printf "GEN: %s was rebuilt\n" "$(basename $modified_file)"
			build "$modified_file"
			if [ "$(basename $modified_file)" = "index.html" ]; then
				generate_index
			fi
			skip_next=1
		done # < <(python3 ./.tooling/fsw.py)
	printf '\nKilled Server\n'
	kill $serverPid
	exit
	;;
esac



mkdir -p $output_dir
files_to_build="$*"
if [ -z "${files_to_build/ /}" ]; then
	files_to_build=$(echo ./src/**/*.html ./src/*.html ./src/*.md ./src/**/*.md ./src/**/*.org ./src/*.org)
fi
oifs=$IFS
IFS=" "
for file in ${files_to_build}; do
	build "$file"
	count=$(( count + 1 ))
done
IFS=$oifs

for job in $(jobs -p); do
	wait "$job"
done

# POST BUILD TASKS

generate_index

exit

#!/usr/bin/env bash

# Init:

# Enable bash options
shopt -s globstar
shopt -s nullglob

# SSG Options
template_pre_content=
template_post_content=
server='deno run --unstable -A ./.tooling/server/server.ts --port=5000 --live=false'

# Helpers:

fin () {
    [ -n "${report_individual_builds:-}" ] && printf '\e[32m\e[1mBuilt\e[0m %s\n' "$1"
}

clean_markup () {
    local -n ptr=${1}
    ptr=${ptr//'<span class="reset">'/}
    ptr=${ptr//'</span>'/}
    ptr=${ptr#*'<h1'*'>'}
    ptr=${ptr%'</h1>'*}
    ptr=${ptr//'}'/}
    ptr=${ptr//'{'/}
    ptr=${ptr//'<img'*'>'/}
}

format_doc_heading () {
    doc_path=${1#'./src/'}
    doc_path=${doc_path%'.'*}

    [[ "$markup" =~ \<h1\>(.*)\<\/h1\> ]] # uses variable from parent here
    doc_title=${BASH_REMATCH[1]}
    clean_markup doc_title
    
    doc_heading=${template_pre_content/'!DOCUMENT-PATH!'/"$doc_path"}
    doc_heading=${doc_heading/'!TITLE!'/"$doc_title"}
}

# Tasks:
build_md () {
    out=${1/src/out}
    out=${out/.md/.html}
    markup=$(quiet=true bash ./.tooling/pond.sh "$1")
    format_doc_heading "$out"
    mkdir -p "$(dirname "$out")"
    printf '%s\n%s\n%s' "$doc_heading" "$markup" "$template_post_content" > "$out"
    fin "$1"
}

build_html () {
    out=${1/src/out}
    cp "$1" "$out"
    fin "$1"
}

emacs_arguments=('--batch' '-l' "$XDG_CONFIG_HOME/emacs/init.el" "-l" "org" "-l" "ox-html")

build_org () {
    out=${1/src/out}
    out=${out/.org/.html}
    out=$(realpath "$out")
    emacs_arguments+=('--file' "$1" '-f' 'org-html-export-to-html' '--eval' "(rename-file \"$(realpath "${1/.org/.html}")\" \"$out\" t)")
    fin "$1"
}

#=======================
# Generic Build Function 
#=======================

build () {
    file=$1
    case "${file##*.}" in
        'org')
            build_org "$file" 
            ;;
        'html')
            build_html "$file" &
            ;;
        'md')
            build_md "$file" &
            ;;
        *)
            return
            ;;
    esac
}

generate_org_full () {
    emacs ${emacs_arguments[@]} >/dev/null 2>&1
}

count=0
generate_index () {
    cp ./src/index.html ./out/index.html 2> /dev/null
    find out/ -maxdepth 1 -type d -not -path 'out/'  | while read -r folder; do
        local posts=""
        while read -r match; do
            file=${match%%:*}
            title=${match#*:}

            clean_markup title
            
            [ -z "${title/ /}" ] && continue
            posts+="<li><a href='/$file'>$title</a></li>\n"
        done < <(grep -ProH '<h1.*?>.*</h1>' "${folder}" )
        folder=${folder#*/}
        sed -i "s\`!POSTS-${folder^^}!\`$posts\`g" "./out/index.html"
    done
    printf "\e[33m\e[1mBUILT\e[0m %d files.\n" "$count"
    pkill --signal USR1 "${server% *}"
}

domain="nes.is-a.dev"
generate_rss_feed () {
    cp ./template.xml ./out/rss.xml
    posts=""
    while read -r match; do
        file=${match%%:*}
        title=${match#*:}
        title=${title#*'<h1'*'>'}
        title=${title%'</h1>'*}
        # title=${title//'&amp;'/'&'}
        title=${title//'<i>'/} title=${title//'</i>'/} title=${title//'<span class="reset">'/} title=${title//'</span>'/}
        title=${title//'<img'*'>'/} # clean up any markup that remains
        file=${file#out/}
            [ -z "${title/ /}" ] && continue
        posts+="<item>\n<title>$title</title>\n<description>${file%.*}</description>\n<link>https://$domain/out/${file}</link>\n</item>\n"
    done < <(grep -ProH '<h1.*?>.*</h1>' out/)
    sed -i "s\`!ITEMS!\`$posts\`g" ./out/rss.xml
}

# Default: Build All Files

case "$1" in
    "serve")
        python3 -m http.server &
        exit
        ;;
    "live")
        python3 -m http.server &
        find src -name '*.html' -or -name '*.md' -or -name '*.org' -not -name '.#*' | entr $0 
        exit
        ;;
esac

shift

intermediate=
IFS="
"
while read -r line; do
    if [[ "$line" == *"!CONTENT!" ]]; then
        template_pre_content=$intermediate
        intermediate=
        continue
    fi
    intermediate+=$line$IFS
done < ./template.html
template_post_content=$intermediate

files_to_build=$*
[ -z "${files_to_build/ /}" ] && files_to_build=$(echo ./src/**/*.html ./src/*.html ./src/*.md ./src/**/*.md ./src/**/*.org ./src/*.org)
oifs=$IFS
IFS=" "
for file in ${files_to_build}; do
    build "$file"
    count=$(( count + 1 ))
done
IFS=$oifs

#generate_org_full &

for job in $(jobs -p); do
    wait "$job"
done

generate_index
# generate_rss_feed

exit
